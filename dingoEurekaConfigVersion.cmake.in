# version
set(PACKAGE_VERSION "@DINGOEUREKA_VERSION@")

if(NOT PACKAGE_FIND_VERSION)
    set(PACKAGE_FIND_VERSION ${PACKAGE_VERSION})
endif()

string(REPLACE "." ";" VERSION_LIST ${PACKAGE_VERSION})
#  actual major version
list(GET VERSION_LIST 0 MAJOR_VERSION)
#  actual minor version
list(GET VERSION_LIST 1 MINOR_VERSION)
message(STATUS "actual dingo-eureka major version ${MAJOR_VERSION}")
message(STATUS "actual dingo-eureka minor version ${MINOR_VERSION}")

string(REPLACE "." ";" FIND_VERSION_LIST ${PACKAGE_FIND_VERSION})
#  find major version
list(GET FIND_VERSION_LIST 0 FIND_MAJOR_VERSION)
#  find minor version
list(GET FIND_VERSION_LIST 1 FIND_MINOR_VERSION)
message(STATUS "Found dingo-eureka major version ${FIND_MAJOR_VERSION}")
message(STATUS "Found dingo-eureka minor version ${FIND_MINOR_VERSION}")

# 1.x compatible 1.y (x>=y)
if(FIND_MAJOR_VERSION EQUAL MAJOR_VERSION AND FIND_MINOR_VERSION LESS_EQUAL MINOR_VERSION)
    set(PACKAGE_VERSION_COMPATIBLE TRUE)
else()
    set(PACKAGE_VERSION_COMPATIBLE FALSE)
endif()

if(PACKAGE_FIND_VERSION STREQUAL PACKAGE_VERSION)
    set(PACKAGE_VERSION_EXACT TRUE) 
endif()

message(STATUS "Found dingo-eureka version ${PACKAGE_VERSION}")